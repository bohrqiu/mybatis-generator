package dalgen.generator.plugins;

import static org.mybatis.generator.internal.util.StringUtility.stringHasValue;
import static org.mybatis.generator.internal.util.messages.Messages.getString;

import java.util.ArrayList;
import java.util.List;

import org.mybatis.generator.api.GeneratedXmlFile;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.PluginAdapter;
import org.mybatis.generator.api.dom.xml.Attribute;
import org.mybatis.generator.api.dom.xml.Document;
import org.mybatis.generator.api.dom.xml.TextElement;
import org.mybatis.generator.api.dom.xml.XmlElement;
import org.mybatis.generator.codegen.XmlConstants;

/**
 * 生成MapperConfig配置文件
 *                       
 * @Filename MapperConfigPlugin.java
 *
 * @Description 
 *
 * @Version 1.0
 *
 * @Author bohr
 *
 * @Email qzhanbo@yiji.com
 *       
 * @History
 *<li>Author: bohr.qiu</li>
 *<li>Date: 2013-4-20</li>
 *<li>Version: 1.0</li>
 *<li>Content: create</li>
 *
 */
public class MapperConfigPlugin extends PluginAdapter {
	
	private List<String> mapperFiles;
	
	public MapperConfigPlugin() {
		mapperFiles = new ArrayList<String>();
	}
	
	public boolean validate(List<String> warnings) {
		boolean valid = true;
		
		if (!stringHasValue(properties.getProperty("targetProject"))) {
			warnings.add(getString("ValidationError.18", "MapperConfigPlugin", "targetProject"));
			valid = false;
		}
		
		if (!stringHasValue(properties.getProperty("targetPackage"))) {
			warnings.add(getString("ValidationError.18", "MapperConfigPlugin", "targetPackage"));
			valid = false;
		}
		
		return valid;
	}
	
	@Override
	public List<GeneratedXmlFile> contextGenerateAdditionalXmlFiles() {
		Document document = new Document(XmlConstants.MYBATIS3_MAPPER_CONFIG_PUBLIC_ID,
			XmlConstants.MYBATIS3_MAPPER_CONFIG_SYSTEM_ID);
		
		XmlElement root = new XmlElement("configuration");
		document.setRootElement(root);
		
		root.addElement(new TextElement("<!--"));
		root.addElement(new TextElement("  the file generated by MyBatis Generator"));
		root.addElement(new TextElement(
			" @author bohr.qiu"));
		
		root.addElement(new TextElement("-->"));
		
		XmlElement mappers = new XmlElement("mappers");
		root.addElement(mappers);
		
		XmlElement mapper;
		for (String mapperFile : mapperFiles) {
			mapper = new XmlElement("mapper");
			mapper.addAttribute(new Attribute("resource", mapperFile));
			mappers.addElement(mapper);
		}
		
		GeneratedXmlFile gxf = new GeneratedXmlFile(document, properties.getProperty("fileName",
			"MapperConfig.xml"), properties.getProperty("targetPackage"),
			properties.getProperty("targetProject"), false, context.getXmlFormatter());
		
		List<GeneratedXmlFile> answer = new ArrayList<GeneratedXmlFile>(1);
		answer.add(gxf);
		
		return answer;
	}
	
	/*
	 * This method collects the name of every SqlMap file generated in
	 * this context.
	 */
	@Override
	public boolean sqlMapGenerated(GeneratedXmlFile sqlMap, IntrospectedTable introspectedTable) {
		StringBuilder sb = new StringBuilder();
		sb.append(sqlMap.getTargetPackage());
		sb.append('.');
		String temp = sb.toString();
		sb.setLength(0);
		sb.append(temp.replace('.', '/'));
		sb.append(sqlMap.getFileName());
		mapperFiles.add(sb.toString());
		
		return true;
	}
}
